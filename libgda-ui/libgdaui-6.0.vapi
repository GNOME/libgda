/* libgdaui-6.0.vapi generated by vapigen-0.26, do not modify. */

[CCode (cprefix = "Gdaui", gir_namespace = "Gdaui", gir_version = "6.0", lower_case_cprefix = "gdaui_")]
namespace Gdaui {
	[CCode (cheader_filename = "libgda-ui/libgda-ui.h", type_id = "gdaui_basic_form_get_type ()")]
	public class BasicForm : Gtk.Box, Atk.Implementor, Gtk.Buildable, Gtk.Orientable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public BasicForm (Gda.Set data_set);
		public void add_to_size_group (Gtk.SizeGroup size_group, Gdaui.BasicFormPart part);
		public void entry_grab_focus (Gda.Holder? holder);
		public void entry_set_editable (Gda.Holder? holder, bool editable);
		public void entry_set_visible (Gda.Holder holder, bool show);
		public unowned Gda.Set get_data_set ();
		public unowned Gtk.Widget get_entry_widget (Gda.Holder holder);
		public unowned Gtk.Widget get_label_widget (Gda.Holder holder);
		public unowned Gtk.Widget get_place_holder (string placeholder_id);
		public bool has_changed ();
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public BasicForm.in_dialog (Gda.Set data_set, Gtk.Window? parent, string? title, string? header);
		public bool is_valid ();
		public void remove_from_size_group (Gtk.SizeGroup size_group, Gdaui.BasicFormPart part);
		public void reset ();
		public void set_as_reference ();
		public void set_entries_to_default ();
		public void set_layout_from_file (string file_name, string form_name);
		public void set_unknown_color (double red, double green, double blue, double alpha);
		[NoAccessorMethod]
		public bool can_expand_v { get; }
		[NoAccessorMethod]
		public bool entries_auto_default { get; set; }
		[NoAccessorMethod]
		public bool headers_sensitive { get; set; }
		[NoAccessorMethod]
		public void* paramlist { get; set; }
		[NoAccessorMethod]
		public bool show_actions { get; set; }
		[NoAccessorMethod]
		public void* xml_layout { set; }
		public virtual signal void activated ();
		public virtual signal void holder_changed (Gda.Holder holder, bool is_user_action);
		public virtual signal void layout_changed ();
		public signal void populate_popup (Gtk.Menu menu);
	}
	[CCode (cheader_filename = "libgda-ui/libgda-ui.h")]
	[Compact]
	public class BasicFormPriv {
	}
	[CCode (cheader_filename = "libgda-ui/libgda-ui.h", type_id = "gdaui_cloud_get_type ()")]
	public class Cloud : Gtk.Box, Atk.Implementor, Gdaui.DataSelector, Gtk.Buildable, Gtk.Orientable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public Cloud (Gda.DataModel model, int label_column, int weight_column);
		public Gtk.Widget create_filter_widget ();
		public void filter (string? filter);
		public void set_selection_mode (Gtk.SelectionMode mode);
		public void set_weight_func (Gdaui.CloudWeightFunc? func);
		[NoAccessorMethod]
		public int label_column { get; set; }
		[NoAccessorMethod]
		public double max_scale { get; set; }
		[NoAccessorMethod]
		public double min_scale { get; set; }
		[NoAccessorMethod]
		public Gda.DataModel model { owned get; set; }
		[NoAccessorMethod]
		public int weight_column { get; set; }
		public virtual signal void activate (int row);
	}
	[CCode (cheader_filename = "libgda-ui/libgda-ui.h")]
	[Compact]
	public class CloudPriv {
	}
	[CCode (cheader_filename = "libgda-ui/libgda-ui.h", type_id = "gdaui_combo_get_type ()")]
	public class Combo : Gtk.ComboBox, Atk.Implementor, Gdaui.DataSelector, Gtk.Buildable, Gtk.CellEditable, Gtk.CellLayout {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public Combo ();
		public void add_null (bool add_null);
		public bool is_null_selected ();
		public void set_data (Gda.DataModel model, [CCode (array_length_cname = "n_cols", array_length_pos = 1.5)] int[] cols_index);
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public Combo.with_model (Gda.DataModel model, int n_cols, int cols_index);
		[NoAccessorMethod]
		public bool as_list { get; set; }
		[NoAccessorMethod]
		public Gda.DataModel model { owned get; set; }
	}
	[CCode (cheader_filename = "libgda-ui/libgda-ui.h", type_id = "gdaui_data_cell_renderer_bin_get_type ()")]
	public class DataCellRendererBin : Gtk.CellRendererPixbuf {
		[CCode (has_construct_function = false, type = "GtkCellRenderer*")]
		public DataCellRendererBin (Gda.DataHandler dh, GLib.Type type);
		public Gda.DataHandler data_handler { construct; }
		[NoAccessorMethod]
		public bool editable { get; set; }
		[NoAccessorMethod]
		public bool to_be_deleted { set; }
		public GLib.Type type { construct; }
		[NoAccessorMethod]
		public GLib.Value value { owned get; set; }
		public virtual signal void changed (string path, GLib.Value new_value);
	}
	[CCode (cheader_filename = "libgda-ui/libgda-ui.h", type_id = "gdaui_data_cell_renderer_boolean_get_type ()")]
	public class DataCellRendererBoolean : Gtk.CellRendererToggle {
		[CCode (has_construct_function = false, type = "GtkCellRenderer*")]
		public DataCellRendererBoolean (Gda.DataHandler dh, GLib.Type type);
		public Gda.DataHandler data_handler { construct; }
		[NoAccessorMethod]
		public bool editable { get; set; }
		[NoAccessorMethod]
		public bool to_be_deleted { set; }
		public GLib.Type type { construct; }
		[NoAccessorMethod]
		public GLib.Value value { owned get; set; }
		public virtual signal void changed (string path, GLib.Value new_value);
	}
	[CCode (cheader_filename = "libgda-ui/libgda-ui.h", type_id = "gdaui_data_cell_renderer_combo_get_type ()")]
	public class DataCellRendererCombo : Gtk.CellRendererText {
		[CCode (has_construct_function = false, type = "GtkCellRenderer*")]
		public DataCellRendererCombo (Gdaui.Set paramlist, Gdaui.SetSource source);
		public Gdaui.Set data_set { construct; }
		public void* data_set_source { construct; }
		[NoAccessorMethod]
		public bool set_default_if_invalid { get; set; }
		[NoAccessorMethod]
		public bool show_expander { set; }
		[NoAccessorMethod]
		public bool to_be_deleted { set; }
		[NoAccessorMethod]
		public void* values { set; }
		[NoAccessorMethod]
		public void* values_display { set; }
		public signal void changed (string object, void* p0, void* p1);
	}
	[CCode (cheader_filename = "libgda-ui/libgda-ui.h", type_id = "gdaui_data_cell_renderer_info_get_type ()")]
	public class DataCellRendererInfo : Gtk.CellRenderer {
		[CCode (has_construct_function = false, type = "GtkCellRenderer*")]
		public DataCellRendererInfo (Gdaui.DataStore store, Gda.DataModelIter iter, Gdaui.SetGroup group);
		[NoWrapper]
		public virtual void status_changed (string path, Gda.ValueAttribute requested_action);
		[NoAccessorMethod]
		public bool editable { get; set; }
		public void* group { construct; }
		public Gda.DataModelIter iter { construct; }
		public Gdaui.DataStore store { construct; }
		[NoAccessorMethod]
		public bool to_be_deleted { set; }
	}
	[CCode (cheader_filename = "libgda-ui/libgda-ui.h")]
	[Compact]
	public class DataCellRendererInfoPriv {
	}
	[CCode (cheader_filename = "libgda-ui/libgda-ui.h", type_id = "gdaui_data_cell_renderer_textual_get_type ()")]
	public class DataCellRendererTextual : Gtk.CellRendererText {
		[CCode (has_construct_function = false, type = "GtkCellRenderer*")]
		public DataCellRendererTextual (Gda.DataHandler? dh, GLib.Type type, string options);
		public Gda.DataHandler data_handler { construct; }
		[NoAccessorMethod]
		public string options { set; }
		[NoAccessorMethod]
		public bool to_be_deleted { set; }
		public GLib.Type type { construct; }
		[NoAccessorMethod]
		public void* value { set; }
		public virtual signal void changed (string path, GLib.Value new_value);
	}
	[CCode (cheader_filename = "libgda-ui/libgda-ui.h", type_id = "gdaui_data_filter_get_type ()")]
	public class DataFilter : Gtk.Box, Atk.Implementor, Gtk.Buildable, Gtk.Orientable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public DataFilter (Gdaui.DataProxy data_widget);
		[NoAccessorMethod]
		public Gdaui.DataProxy data_widget { owned get; set; }
	}
	[CCode (cheader_filename = "libgda-ui/libgda-ui.h")]
	[Compact]
	public class DataFilterPriv {
	}
	[CCode (cheader_filename = "libgda-ui/libgda-ui.h", type_id = "gdaui_data_proxy_info_get_type ()")]
	public class DataProxyInfo : Gtk.Toolbar, Atk.Implementor, Gtk.Buildable, Gtk.Orientable, Gtk.ToolShell {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public DataProxyInfo (Gdaui.DataProxy data_proxy, Gdaui.DataProxyInfoFlag flags);
		[NoAccessorMethod]
		public Gdaui.DataProxy data_proxy { owned get; set; }
	}
	[CCode (cheader_filename = "libgda-ui/libgda-ui.h")]
	[Compact]
	public class DataProxyInfoPriv {
	}
	[CCode (cheader_filename = "libgda-ui/libgda-ui.h", type_id = "gdaui_data_store_get_type ()")]
	public class DataStore : GLib.Object, Gtk.TreeModel {
		[CCode (has_construct_function = false)]
		protected DataStore ();
		public bool append (Gtk.TreeIter iter);
		public void @delete (Gtk.TreeIter iter);
		public bool get_iter_from_values (out Gtk.TreeIter iter, GLib.SList<GLib.Value?> values, int cols_index);
		public unowned Gda.DataProxy get_proxy ();
		public int get_row_from_iter (Gtk.TreeIter iter);
		public static Gtk.TreeModel @new (Gda.DataModel model);
		public bool set_value (Gtk.TreeIter iter, int col, GLib.Value value);
		public void undelete (Gtk.TreeIter iter);
		[NoAccessorMethod]
		public void* model { get; construct; }
		[NoAccessorMethod]
		public bool prepend_null_entry { get; set; }
		public void* proxy { get; }
	}
	[CCode (cheader_filename = "libgda-ui/libgda-ui.h")]
	[Compact]
	public class DataStorePriv {
	}
	[CCode (cheader_filename = "libgda-ui/libgda-ui.h", type_id = "gdaui_entry_get_type ()")]
	public class Entry : Gtk.Entry, Atk.Implementor, Gtk.Buildable, Gtk.CellEditable, Gtk.Editable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public Entry (string? prefix, string? suffix);
		[NoWrapper]
		public virtual void assume_delete (int virt_start_pos, int virt_end_pos, int offset);
		[NoWrapper]
		public virtual void assume_insert (string text, int text_length, int virt_pos, int offset);
		[NoWrapper]
		public virtual string get_empty_text ();
		public string get_text ();
		public void set_max_length (int max);
		public void set_prefix (string prefix);
		public void set_suffix (string suffix);
		public void set_text (string? text);
		public void set_width_chars (int max_width);
		[NoAccessorMethod]
		public string prefix { owned get; set; }
		[NoAccessorMethod]
		public string suffix { owned get; set; }
	}
	[CCode (cheader_filename = "libgda-ui/libgda-ui.h", type_id = "gdaui_entry_bin_get_type ()")]
	public class EntryBin : Gdaui.EntryWrapper, Atk.Implementor, Gdaui.DataEntry, Gtk.Buildable, Gtk.Scrollable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public EntryBin (Gda.DataHandler dh, GLib.Type type);
	}
	[CCode (cheader_filename = "libgda-ui/libgda-ui.h", type_id = "gdaui_entry_boolean_get_type ()")]
	public class EntryBoolean : Gdaui.EntryWrapper, Atk.Implementor, Gdaui.DataEntry, Gtk.Buildable, Gtk.Scrollable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public EntryBoolean (Gda.DataHandler dh, GLib.Type type);
	}
	[CCode (cheader_filename = "libgda-ui/libgda-ui.h", type_id = "gdaui_entry_combo_get_type ()")]
	public class EntryCombo : Gdaui.EntryShell, Atk.Implementor, Gdaui.DataEntry, Gtk.Buildable, Gtk.Scrollable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public EntryCombo (Gdaui.Set paramlist, Gdaui.SetSource source);
		public GLib.SList<weak GLib.Value?> get_all_values ();
		public GLib.SList<weak GLib.Value?> get_reference_values ();
		public GLib.SList<weak GLib.Value?> get_values ();
		public void set_default_values (GLib.SList<GLib.Value?> values);
		public void set_reference_values (GLib.SList<GLib.Value?> values);
		public bool set_values (GLib.SList<GLib.Value?>? values);
		[NoAccessorMethod]
		public bool set_default_if_invalid { get; set; }
	}
	[CCode (cheader_filename = "libgda-ui/libgda-ui.h")]
	[Compact]
	public class EntryComboPriv {
	}
	[CCode (cheader_filename = "libgda-ui/libgda-ui.h", type_id = "gdaui_entry_common_time_get_type ()")]
	public class EntryCommonTime : Gdaui.EntryWrapper, Atk.Implementor, Gdaui.DataEntry, Gtk.Buildable, Gtk.CellEditable, Gtk.Scrollable {
		[CCode (has_construct_function = false)]
		protected EntryCommonTime ();
		[NoAccessorMethod]
		public bool editing_canceled { get; set; }
		[NoAccessorMethod]
		public uint type { get; set; }
	}
	[CCode (cheader_filename = "libgda-ui/libgda-ui.h", type_id = "gdaui_entry_date_get_type ()")]
	public class EntryDate : Gdaui.EntryCommonTime, Atk.Implementor, Gdaui.DataEntry, Gtk.Buildable, Gtk.CellEditable, Gtk.Scrollable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public EntryDate (Gda.DataHandler dh);
	}
	[CCode (cheader_filename = "libgda-ui/libgda-ui.h", type_id = "gdaui_entry_none_get_type ()")]
	public class EntryNone : Gdaui.EntryWrapper, Atk.Implementor, Gdaui.DataEntry, Gtk.Buildable, Gtk.Scrollable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public EntryNone (GLib.Type type);
	}
	[CCode (cheader_filename = "libgda-ui/libgda-ui.h", type_id = "gdaui_entry_number_get_type ()")]
	public class EntryNumber : Gdaui.EntryWrapper, Atk.Implementor, Gdaui.DataEntry, Gtk.Buildable, Gtk.CellEditable, Gtk.Scrollable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public EntryNumber (Gda.DataHandler dh, GLib.Type type, string options);
		public static bool is_type_numeric (GLib.Type type);
		[NoAccessorMethod]
		public bool editing_canceled { get; set; }
		[NoAccessorMethod]
		public string options { set; }
	}
	[CCode (cheader_filename = "libgda-ui/libgda-ui.h", type_id = "gdaui_entry_shell_get_type ()")]
	public class EntryShell : Gtk.Viewport, Atk.Implementor, Gtk.Buildable, Gtk.Scrollable {
		[CCode (has_construct_function = false)]
		protected EntryShell ();
		public void pack_entry (Gtk.Widget main_widget);
		public void refresh ();
		public void set_ucolor (double red, double green, double blue, double alpha);
		public void set_unknown (bool unknown);
		[NoAccessorMethod]
		public bool actions { get; set; }
		[NoAccessorMethod]
		public Gda.DataHandler handler { owned get; set; }
		[NoAccessorMethod]
		public bool is_cell_renderer { get; set; }
	}
	[CCode (cheader_filename = "libgda-ui/libgda-ui.h")]
	[Compact]
	public class EntryShellPriv {
	}
	[CCode (cheader_filename = "libgda-ui/libgda-ui.h", type_id = "gdaui_entry_string_get_type ()")]
	public class EntryString : Gdaui.EntryWrapper, Atk.Implementor, Gdaui.DataEntry, Gtk.Buildable, Gtk.CellEditable, Gtk.Scrollable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public EntryString (Gda.DataHandler dh, GLib.Type type, string options);
		[NoAccessorMethod]
		public bool editing_canceled { get; set; }
		[NoAccessorMethod]
		public bool multiline { get; set; }
		[NoAccessorMethod]
		public string options { set; }
	}
	[CCode (cheader_filename = "libgda-ui/libgda-ui.h", type_id = "gdaui_entry_time_get_type ()")]
	public class EntryTime : Gdaui.EntryCommonTime, Atk.Implementor, Gdaui.DataEntry, Gtk.Buildable, Gtk.CellEditable, Gtk.Scrollable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public EntryTime (Gda.DataHandler dh);
	}
	[CCode (cheader_filename = "libgda-ui/libgda-ui.h", type_id = "gdaui_entry_timestamp_get_type ()")]
	public class EntryTimestamp : Gdaui.EntryCommonTime, Atk.Implementor, Gdaui.DataEntry, Gtk.Buildable, Gtk.CellEditable, Gtk.Scrollable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public EntryTimestamp (Gda.DataHandler dh);
	}
	[CCode (cheader_filename = "libgda-ui/libgda-ui.h", type_id = "gdaui_entry_wrapper_get_type ()")]
	public class EntryWrapper : Gdaui.EntryShell, Atk.Implementor, Gdaui.DataEntry, Gtk.Buildable, Gtk.Scrollable {
		[CCode (has_construct_function = false)]
		protected EntryWrapper ();
		[NoWrapper]
		public virtual bool can_expand (bool horiz);
		public void contents_changed ();
		[NoWrapper]
		public virtual void grab_focus ();
		[NoWrapper]
		public virtual bool is_valid ();
		[NoWrapper]
		public virtual GLib.Value? real_get_value ();
		[NoWrapper]
		public virtual void real_set_value (GLib.Value value);
		[NoWrapper]
		public virtual void set_editable (bool editable);
		[NoWrapper]
		public virtual bool value_is_equal_to (GLib.Value value);
		[NoWrapper]
		public virtual bool value_is_null ();
		[NoAccessorMethod]
		public bool set_default_if_invalid { get; set; }
	}
	[CCode (cheader_filename = "libgda-ui/libgda-ui.h")]
	[Compact]
	public class EntryWrapperPriv {
	}
	[CCode (cheader_filename = "libgda-ui/libgda-ui.h", type_id = "gdaui_form_get_type ()")]
	public class Form : Gtk.Box, Atk.Implementor, Gdaui.DataProxy, Gdaui.DataSelector, Gtk.Buildable, Gtk.Orientable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public Form (Gda.DataModel model);
		[NoAccessorMethod]
		public Gdaui.DataProxyInfo info { owned get; }
		[NoAccessorMethod]
		public Gda.DataModel model { owned get; construct; }
		[NoAccessorMethod]
		public Gdaui.RawForm raw_form { owned get; }
	}
	[CCode (cheader_filename = "libgda-ui/libgda-ui.h")]
	[Compact]
	public class FormPriv {
	}
	[CCode (cheader_filename = "libgda-ui/libgda-ui.h", type_id = "gdaui_formatted_entry_get_type ()")]
	public class FormattedEntry : Gdaui.Entry, Atk.Implementor, Gtk.Buildable, Gtk.CellEditable, Gtk.Editable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public FormattedEntry (string format, string? mask);
		public string get_text ();
		public void set_insert_func (Gdaui.FormattedEntryInsertFunc? insert_func);
		[NoAccessorMethod]
		public string format { owned get; set; }
		[NoAccessorMethod]
		public string mask { owned get; set; }
	}
	[CCode (cheader_filename = "libgda-ui/libgda-ui.h", type_id = "gdaui_grid_get_type ()")]
	public class Grid : Gtk.Box, Atk.Implementor, Gdaui.DataProxy, Gdaui.DataSelector, Gtk.Buildable, Gtk.Orientable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public Grid (Gda.DataModel? model);
		public void set_sample_size (int sample_size);
		[NoAccessorMethod]
		public Gdaui.DataProxyInfo info { owned get; }
		[NoAccessorMethod]
		public Gda.DataModel model { owned get; set; }
		[NoAccessorMethod]
		public Gdaui.RawGrid raw_grid { owned get; }
	}
	[CCode (cheader_filename = "libgda-ui/libgda-ui.h")]
	[Compact]
	public class GridPriv {
	}
	[CCode (cheader_filename = "libgda-ui/libgda-ui.h", type_id = "gdaui_login_get_type ()")]
	public class Login : Gtk.Box, Atk.Implementor, Gtk.Buildable, Gtk.Orientable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public Login (string? dsn);
		public unowned Gda.DsnInfo get_connection_information ();
		public void set_connection_information (Gda.DsnInfo cinfo);
		public void set_dsn (string? dsn);
		public void set_mode (Gdaui.LoginMode mode);
		[NoAccessorMethod]
		public string dsn { owned get; set; }
		[NoAccessorMethod]
		public bool valid { get; }
		public virtual signal void changed (bool is_valid);
	}
	[CCode (cheader_filename = "libgda-ui/libgda-ui.h", type_id = "gdaui_numeric_entry_get_type ()")]
	public class NumericEntry : Gdaui.Entry, Atk.Implementor, Gtk.Buildable, Gtk.CellEditable, Gtk.Editable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public NumericEntry (GLib.Type type);
		public GLib.Value? get_value ();
		[NoAccessorMethod]
		public char decimal_sep { get; set; }
		[NoAccessorMethod]
		public uint n_decimals { get; set; }
		[NoAccessorMethod]
		public char thousands_sep { get; set; }
		[NoAccessorMethod]
		public GLib.Type type { get; set; }
	}
	[CCode (cheader_filename = "libgda-ui/libgda-ui.h", type_id = "gdaui_provider_selector_get_type ()")]
	public class ProviderSelector : Gdaui.Combo, Atk.Implementor, Gdaui.DataSelector, Gtk.Buildable, Gtk.CellEditable, Gtk.CellLayout {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public ProviderSelector ();
		public unowned string get_provider ();
		public unowned Gda.ServerProvider get_provider_obj ();
		public bool set_provider (string? provider);
	}
	[CCode (cheader_filename = "libgda-ui/libgda-ui.h", type_id = "gdaui_raw_form_get_type ()")]
	public class RawForm : Gdaui.BasicForm, Atk.Implementor, Gdaui.DataProxy, Gdaui.DataSelector, Gtk.Buildable, Gtk.Orientable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public RawForm (Gda.DataModel? model);
		[NoAccessorMethod]
		public Gda.DataModel model { owned get; set; }
	}
	[CCode (cheader_filename = "libgda-ui/libgda-ui.h")]
	[Compact]
	public class RawFormPriv {
	}
	[CCode (cheader_filename = "libgda-ui/libgda-ui.h", type_id = "gdaui_raw_grid_get_type ()")]
	public class RawGrid : Gtk.TreeView, Atk.Implementor, Gdaui.DataProxy, Gdaui.DataSelector, Gtk.Buildable, Gtk.Scrollable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public RawGrid (Gda.DataModel model);
		public void add_formatting_function (owned Gdaui.RawGridFormatFunc func);
		public void remove_formatting_function (Gdaui.RawGridFormatFunc func);
		public void set_layout_from_file (string file_name, string grid_name);
		public void set_sample_size (int sample_size);
		public void set_sample_start (int sample_start);
		[NoAccessorMethod]
		public bool info_cell_visible { get; set; }
		[NoAccessorMethod]
		public Gda.DataModel model { owned get; set; }
		[NoAccessorMethod]
		public void* xml_layout { set; }
		public virtual signal void double_clicked (int row);
		public virtual signal void populate_popup (Gtk.Menu menu);
	}
	[CCode (cheader_filename = "libgda-ui/libgda-ui.h")]
	[Compact]
	public class RawGridPriv {
	}
	[CCode (cheader_filename = "libgda-ui/libgda-ui.h", type_id = "gdaui_rt_editor_get_type ()")]
	public class RtEditor : Gtk.Box, Atk.Implementor, Gtk.Buildable, Gtk.Orientable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public RtEditor ();
		public string get_contents ();
		public void set_contents (string markup, int length);
		public void set_editable (bool editable);
		[NoAccessorMethod]
		public Gtk.TextBuffer buffer { owned get; }
		[NoAccessorMethod]
		public bool in_scrolled_window { get; set; }
		[NoAccessorMethod]
		public bool no_background { get; set; }
		[NoAccessorMethod]
		public bool show_markup { get; set; }
		public virtual signal void changed ();
	}
	[CCode (cheader_filename = "libgda-ui/libgda-ui.h")]
	[Compact]
	public class RtEditorPriv {
	}
	[CCode (cheader_filename = "libgda-ui/libgda-ui.h", type_id = "gdaui_server_operation_get_type ()")]
	public class ServerOperation : Gtk.Box, Atk.Implementor, Gtk.Buildable, Gtk.Orientable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public ServerOperation (Gda.ServerOperation op);
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public ServerOperation.in_dialog (Gda.ServerOperation op, Gtk.Window? parent, string? title, string? header);
		[NoAccessorMethod]
		public bool hide_single_header { get; set construct; }
		[NoAccessorMethod]
		public Gda.ServerOperation server_operation { owned get; construct; }
	}
	[CCode (cheader_filename = "libgda-ui/libgda-ui.h")]
	[Compact]
	public class ServerOperationPriv {
	}
	[CCode (cheader_filename = "libgda-ui/libgda-ui.h", type_id = "gdaui_set_get_type ()")]
	public class Set : GLib.Object {
		public weak GLib.SList<Gdaui.SetGroup> groups_list;
		public weak GLib.SList<Gdaui.SetSource> sources_list;
		[CCode (has_construct_function = false)]
		public Set (Gda.Set @set);
		public Gdaui.SetGroup get_group (Gda.Holder holder);
		[NoAccessorMethod]
		public Gda.Set @set { owned get; construct; }
		public virtual signal void public_data_changed ();
		public virtual signal void source_model_changed (void* source);
	}
	[CCode (cheader_filename = "libgda-ui/libgda-ui.h", copy_function = "g_boxed_copy", free_function = "g_boxed_free", type_id = "gdaui_set_group_get_type ()")]
	[Compact]
	public class SetGroup {
		public weak Gda.SetGroup group;
		public weak Gdaui.SetSource source;
		[CCode (has_construct_function = false)]
		public SetGroup (Gda.SetGroup group);
		public Gdaui.SetGroup copy ();
		public void free ();
		public Gda.SetGroup get_group ();
		public Gdaui.SetSource get_source ();
		public void set_group (Gda.SetGroup group);
		public void set_source (Gdaui.SetSource source);
	}
	[CCode (cheader_filename = "libgda-ui/libgda-ui.h")]
	[Compact]
	public class SetPriv {
	}
	[CCode (cheader_filename = "libgda-ui/libgda-ui.h", copy_function = "g_boxed_copy", free_function = "g_boxed_free", type_id = "gdaui_set_source_get_type ()")]
	[Compact]
	public class SetSource {
		[CCode (array_length = false, array_null_terminated = true)]
		public weak int[] ref_cols_index;
		public int ref_n_cols;
		[CCode (array_length = false, array_null_terminated = true)]
		public weak int[] shown_cols_index;
		public int shown_n_cols;
		public weak Gda.SetSource source;
		[CCode (has_construct_function = false)]
		public SetSource (Gda.SetSource source);
		public Gdaui.SetSource copy ();
		public void free ();
		[CCode (array_length = false, array_null_terminated = true)]
		public unowned int[] get_ref_columns ();
		public int get_ref_n_cols ();
		[CCode (array_length = false, array_null_terminated = true)]
		public unowned int[] get_shown_columns ();
		public int get_shown_n_cols ();
		public Gda.SetSource get_source ();
		public void set_ref_columns ([CCode (array_length_cname = "n_columns", array_length_pos = 1.1)] int[] columns);
		public void set_shown_columns ([CCode (array_length_cname = "n_columns", array_length_pos = 1.1)] int[] columns);
		public void set_source (Gda.SetSource source);
	}
	[CCode (cheader_filename = "libgda-ui/libgda-ui.h", type_id = "gdaui_tree_store_get_type ()")]
	public class TreeStore : GLib.Object, Gtk.TreeDragDest, Gtk.TreeDragSource, Gtk.TreeModel {
		[CCode (has_construct_function = false)]
		protected TreeStore ();
		public bool get_iter_from_node (Gtk.TreeIter iter, Gda.TreeNode node);
		public unowned Gda.TreeNode get_node (Gtk.TreeIter iter);
		public static Gtk.TreeModel newv (Gda.Tree tree, uint n_columns, GLib.Type types, string attribute_names);
		[NoAccessorMethod]
		public Gda.Tree tree { owned get; construct; }
		public virtual signal bool drag_can_drag (string path);
		public virtual signal bool drag_can_drop (string path, void* selection_data);
		public virtual signal bool drag_delete (string path);
		public virtual signal bool drag_drop (string path, void* selection_data);
		public virtual signal bool drag_get (string path, void* selection_data);
	}
	[CCode (cheader_filename = "libgda-ui/libgda-ui.h")]
	[Compact]
	public class TreeStorePriv {
	}
	[CCode (cheader_filename = "libgda-ui/libgda-ui.h", type_id = "gdaui_data_entry_get_type ()")]
	public interface DataEntry : Gtk.Widget {
		[Deprecated (since = "5.2")]
		public abstract bool can_expand (bool horiz);
		[NoWrapper]
		public abstract bool contents_valid () throws GLib.Error;
		public static GLib.Quark error_quark ();
		public abstract Gda.ValueAttribute get_attributes ();
		public abstract bool get_editable ();
		public abstract unowned Gda.DataHandler get_handler ();
		[NoWrapper]
		public abstract unowned GLib.Value? get_ref_value ();
		public unowned GLib.Value? get_reference_value ();
		public abstract unowned GLib.Value? get_value ();
		public abstract GLib.Type get_value_type ();
		public abstract void grab_focus ();
		public abstract void set_attributes (Gda.ValueAttribute attrs, Gda.ValueAttribute mask);
		public void set_default_value (GLib.Value? value);
		public abstract void set_editable (bool editable);
		[NoWrapper]
		public abstract void set_ref_value (GLib.Value value);
		public void set_reference_current ();
		public void set_reference_value (GLib.Value? value);
		public abstract void set_unknown_color (double red, double green, double blue, double alpha);
		public abstract void set_value (GLib.Value? value);
		[NoWrapper]
		public abstract void set_value_default (GLib.Value value);
		public abstract void set_value_type (GLib.Type type);
		public abstract bool validate () throws GLib.Error;
		public virtual signal void contents_activated ();
		public virtual signal void contents_modified ();
		public virtual signal void expand_changed ();
		public virtual signal void status_changed ();
	}
	[CCode (cheader_filename = "libgda-ui/libgda-ui.h", type_id = "gdaui_data_proxy_get_type ()")]
	public interface DataProxy : GLib.Object {
		public void column_set_editable (int column, bool editable);
		public void column_show_actions (int column, bool show_actions);
		public abstract unowned Gda.DataProxy get_proxy ();
		public abstract Gdaui.DataProxyWriteMode get_write_mode ();
		public abstract void perform_action (Gdaui.Action action);
		[NoWrapper]
		public abstract void set_column_editable (int column, bool editable);
		public abstract bool set_write_mode (Gdaui.DataProxyWriteMode mode);
		[NoWrapper]
		public abstract void show_column_actions (int column, bool show_actions);
		public abstract bool supports_action (Gdaui.Action action);
		public virtual signal void proxy_changed (Gda.DataProxy proxy);
	}
	[CCode (cheader_filename = "libgda-ui/libgda-ui.h", type_id = "gdaui_data_selector_get_type ()")]
	public interface DataSelector : GLib.Object {
		public abstract unowned Gda.DataModelIter get_data_set ();
		public abstract unowned Gda.DataModel get_model ();
		public abstract GLib.Array<int> get_selected_rows ();
		public abstract bool select_row (int row);
		public abstract void set_column_visible (int column, bool visible);
		public abstract void set_model (Gda.DataModel model);
		public abstract void unselect_row (int row);
		public virtual signal void selection_changed ();
	}
	[CCode (cheader_filename = "libgda-ui/libgda-ui.h", has_type_id = false)]
	public struct Plugin {
		public weak string plugin_name;
		public weak string plugin_descr;
		public weak string plugin_file;
		public uint nb_g_types;
		public GLib.Type valid_g_types;
		public weak string options_xml_spec;
		public void declare ();
	}
	[CCode (cheader_filename = "libgda-ui/libgda-ui.h", cprefix = "GDAUI_ACTION_", has_type_id = false)]
	public enum Action {
		NEW_DATA,
		WRITE_MODIFIED_DATA,
		DELETE_SELECTED_DATA,
		UNDELETE_SELECTED_DATA,
		RESET_DATA,
		MOVE_FIRST_RECORD,
		MOVE_PREV_RECORD,
		MOVE_NEXT_RECORD,
		MOVE_LAST_RECORD,
		MOVE_FIRST_CHUNK,
		MOVE_PREV_CHUNK,
		MOVE_NEXT_CHUNK,
		MOVE_LAST_CHUNK
	}
	[CCode (cheader_filename = "libgda-ui/libgda-ui.h", cprefix = "GDAUI_ACTION_", has_type_id = false)]
	[Flags]
	public enum ActionMode {
		NAVIGATION_ARROWS,
		NAVIGATION_SCROLL,
		MODIF_AUTO_COMMIT,
		MODIF_COMMIT_IMMEDIATE,
		ASK_CONFIRM_UPDATE,
		ASK_CONFIRM_DELETE,
		ASK_CONFIRM_INSERT,
		REPORT_ERROR
	}
	[CCode (cheader_filename = "libgda-ui/libgda-ui.h", cprefix = "GDAUI_BASIC_FORM_", has_type_id = false)]
	public enum BasicFormPart {
		LABELS,
		ENTRIES
	}
	[CCode (cheader_filename = "libgda-ui/libgda-ui.h", cprefix = "GDAUI_DATA_PROXY_INFO_", has_type_id = false)]
	[Flags]
	public enum DataProxyInfoFlag {
		NONE,
		CURRENT_ROW,
		ROW_MODIFY_BUTTONS,
		ROW_MOVE_BUTTONS,
		CHUNK_CHANGE_BUTTONS,
		NO_FILTER
	}
	[CCode (cheader_filename = "libgda-ui/libgda-ui.h", cprefix = "GDAUI_DATA_PROXY_WRITE_ON_", has_type_id = false)]
	public enum DataProxyWriteMode {
		DEMAND,
		ROW_CHANGE,
		VALUE_ACTIVATED,
		VALUE_CHANGE
	}
	[CCode (cheader_filename = "libgda-ui/libgda-ui.h", cprefix = "GDA_UI_LOGIN_", has_type_id = false)]
	[Flags]
	public enum LoginMode {
		ENABLE_CONTROL_CENTRE_MODE,
		HIDE_DSN_SELECTION_MODE,
		HIDE_DIRECT_CONNECTION_MODE
	}
	[CCode (cheader_filename = "libgda-ui/libgda-ui.h", cprefix = "GDAUI_DATA_ENTRY_")]
	public errordomain DataEntryError {
		FILE_NOT_FOUND_ERROR,
		INVALID_DATA_ERROR;
		public static GLib.Quark quark ();
	}
	[CCode (cheader_filename = "libgda-ui/libgda-ui.h", has_target = false)]
	public delegate double CloudWeightFunc (Gda.DataModel model, int row, void* data);
	[CCode (cheader_filename = "libgda-ui/libgda-ui.h", has_target = false)]
	public delegate void FormattedEntryInsertFunc (Gdaui.FormattedEntry entry, unichar insert_char, int virt_pos, void* data);
	[CCode (cheader_filename = "libgda-ui/libgda-ui.h", has_target = false)]
	public delegate void RawGridFormatFunc (Gtk.CellRenderer cell, Gtk.TreeViewColumn column, int column_pos, Gda.DataModel model, int row, void* data);
	[CCode (cheader_filename = "libgda-ui/libgda-ui.h", cname = "GDAUI_ATTRIBUTE_PLUGIN")]
	public const string ATTRIBUTE_PLUGIN;
	[CCode (cheader_filename = "libgda-ui/libgda-ui.h", cname = "GDAUI_COLOR_NORMAL_DEFAULT")]
	public const string COLOR_NORMAL_DEFAULT;
	[CCode (cheader_filename = "libgda-ui/libgda-ui.h", cname = "GDAUI_COLOR_NORMAL_INVALID")]
	public const string COLOR_NORMAL_INVALID;
	[CCode (cheader_filename = "libgda-ui/libgda-ui.h", cname = "GDAUI_COLOR_NORMAL_MODIF")]
	public const string COLOR_NORMAL_MODIF;
	[CCode (cheader_filename = "libgda-ui/libgda-ui.h", cname = "GDAUI_COLOR_NORMAL_NULL")]
	public const string COLOR_NORMAL_NULL;
	[CCode (cheader_filename = "libgda-ui/libgda-ui.h", cname = "GDAUI_COLOR_PRELIGHT_DEFAULT")]
	public const string COLOR_PRELIGHT_DEFAULT;
	[CCode (cheader_filename = "libgda-ui/libgda-ui.h", cname = "GDAUI_COLOR_PRELIGHT_INVALID")]
	public const string COLOR_PRELIGHT_INVALID;
	[CCode (cheader_filename = "libgda-ui/libgda-ui.h", cname = "GDAUI_COLOR_PRELIGHT_MODIF")]
	public const string COLOR_PRELIGHT_MODIF;
	[CCode (cheader_filename = "libgda-ui/libgda-ui.h", cname = "GDAUI_COLOR_PRELIGHT_NULL")]
	public const string COLOR_PRELIGHT_NULL;
	[CCode (cheader_filename = "libgda-ui/libgda-ui.h", cname = "GDAUI_COLOR_UNKNOWN_MASK")]
	public const double COLOR_UNKNOWN_MASK;
	[CCode (cheader_filename = "libgda-ui/libgda-ui.h")]
	public static Gdaui.DataEntry new_data_entry (GLib.Type type, string? plugin_name);
}
